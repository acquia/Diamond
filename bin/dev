#!/usr/bin/env ruby
#
# Copyright 2015 Acquia, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
# Development utility to help with commonly used commands

require 'fileutils'
require 'open3'
require 'pathname'
require 'thor'

nemesis_puppet_root = File.expand_path(File.join(__FILE__, '..', '..'))
$dist_root = File.join(nemesis_puppet_root, 'dist')
$bin_dir = File.join(nemesis_puppet_root, 'bin')

class PackageCommand < Thor
  desc "update PACKAGE REPO", "Build and upload a package to a bootstrap repository stack"
  def update(package, repo)
    Dir.glob(File.join("#{$dist_root}", "**", "#{package}*.rpm")).each { |x| FileUtils.rm_f(x) }

    commands = [
     "#{$bin_dir}/build -c list",
     "#{$bin_dir}/repo create",
     "#{$bin_dir}/repo upload #{repo}"
    ]

    commands.each do |cmd|
      unless system("#{cmd}")
        puts "Package update failed with exitcode #{$?.exitstatus}"
        exit 1
      end
    end
  end
end

class ContainerCommand < Thor
  desc "update", "Build and push all containers to the set AWS Docker registry"
  method_option :tag, :aliases => '-t', :type => :string, :default => 'latest', :desc => "Container image tag. [Default: 'latest']"
  method_option :stage, :type => :string, :default => ENV['USER'], :desc => "Stage prefix for the repository. [Default: '#{ENV['USER']}']"
  def update
    stdout, stderr, status = Open3.capture3("#{$bin_dir}/build -c --list")
    stdout.split("\n").each do |container|
      system("#{$bin_dir}/registry push #{container} --tag #{options[:tag]} --stage #{options[:stage]}")
    end
  end
end

class DevCommand < Thor
  desc "package SUBCOMMAND ...ARGS", "Commands to help with package management"
  subcommand "package", PackageCommand

  desc "container SUBCOMMAND ...ARGS", "Commands to help with container management"
  subcommand "container", ContainerCommand
end

DevCommand.start(ARGV)
