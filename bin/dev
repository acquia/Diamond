#!/usr/bin/env ruby
#
# Copyright 2015 Acquia, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
# Development utility to help with commonly used commands

require 'fileutils'
require 'open3'
require 'pathname'
require 'thor'

nemesis_puppet_root = File.expand_path(File.join(__FILE__, '..', '..'))
$dist_root = File.join(nemesis_puppet_root, 'dist')
$bin_dir = File.join(nemesis_puppet_root, 'bin')

class PackageCommand < Thor
  desc "update PACKAGE REPO", "Build and upload a package to a bootstrap repository stack"
  def update(package, repo)
    Dir.glob(File.join("#{$dist_root}", "packages", "#{package}*.rpm")).each { |x| FileUtils.rm_f(x) }

    commands = [
     "#{$bin_dir}/repo delete #{repo}",
     "#{$bin_dir}/build -p #{package}",
     "#{$bin_dir}/repo create",
     "#{$bin_dir}/repo upload #{repo}"
    ]

    commands.each do |cmd|
      unless system("#{cmd}")
        puts "Package update failed with exitcode #{$?.exitstatus}"
        exit 1
      end
    end
  end
end

class ContainerCommand < Thor
  desc "update", "Build and push all containers to the set AWS Docker registry"
  method_option :tag, :aliases => '-t', :type => :string, :default => 'latest', :desc => "Container image tag. [Default: 'latest']"
  method_option :stage, :type => :string, :default => ENV['USER'], :desc => "Stage prefix for the repository. [Default: '#{ENV['USER']}']"
  def update
    stdout, stderr, status = Open3.capture3("#{$bin_dir}/build -c --list")
    stdout.split("\n").each do |container|
      system("#{$bin_dir}/registry push #{container} --tag #{options[:tag]} --stage #{options[:stage]}")
    end
  end
end

class TagCommand < Thor
  desc "update", "Update the current tag"
  method_option :remote, :type => :string, :required => true, :desc => "Remote repository name."
  method_option :push, :type => :boolean, :default => false, :desc => "Push tag to the remote repository [Default: false]"
  method_option :dry_run, :type => :boolean, :default => false, :desc => "Dry run, does not make any modifications. [Default: false]"
  method_option :major, :type => :boolean, :default => false, :desc => "Update major version [Default: false]"
  method_option :minor, :type => :boolean, :default => false, :desc => "Update minor version [Default: false]"
  method_option :patch, :type => :boolean, :default => true, :desc => "Update patch version [Default: true]"
  def update
    `git fetch --tags #{options[:remote]} > /dev/null`
    ver = `git describe --tags --long`.strip
    tag, commits_since, sha = ver.split("-")

    major, minor, patch = tag.split(".")
    if options[:major]
      major = major.succ
      minor = 0
      patch = 0
    elsif options[:minor]
      minor = minor.succ
      patch = 0
    else
      patch = patch.succ
    end

    new_tag = [major, minor, patch].join(".")
    puts "New tag: #{new_tag}"

    unless options[:dry_run]
      `git tag #{new_tag}`

      if options[:push]
        `git push #{new_tag} #{options[:remote]}`
      else
        puts "To push #{new_tag}: git push #{new_tag} #{options[:remote]}"
      end
    end
  end
end

class DockerCommand < Thor
  desc "lint DIR", "Find all Dockerfile* file in the specified path and run lint on them"
  def lint(dir=Dir.pwd)
    `docker pull redcoolbeans/dockerlint:latest`
    if $?.exitstatus != 0
      puts 'Error: unable to pull dockerlint container redcoolbeans/dockerlint:latest'
      exit 1
    end

    Dir.glob("#{dir}/**/Dockerfile*") do |dkr_file|
      stdout, stderr, status = Open3.capture3("docker run -i --rm -v #{dkr_file}:/Dockerfile redcoolbeans/dockerlint")
      unless status.exitstatus == 0
        puts "Error: Dockerfile linting failed for - #{dkr_file}"
        puts "", stderr
        exit 1
      end
    end
  end
end

class DevCommand < Thor
  desc "container SUBCOMMAND ...ARGS", "Commands to help with container management"
  subcommand "container", ContainerCommand

  desc "docker SUBCOMMAND ...ARGS", "Commands to help with docker"
  subcommand "docker", DockerCommand

  desc "package SUBCOMMAND ...ARGS", "Commands to help with package management"
  subcommand "package", PackageCommand

  desc "tag SUBCOMMAND ...ARGS", "Commands to help with tagging"
  subcommand "tag", TagCommand
end

DevCommand.start(ARGV)
