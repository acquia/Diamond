<%-
require "facter"
require "json"
require "yaml"

default_config_file = File.join(File.dirname(__FILE__), "..", "files", "cassandra.yaml")
overriders_file = "/etc/cassandra_overrides.json"

defaults = {
  "num_tokens" => 256,
  "max_hints_delivery_threads" => 8,
  "authenticator" => "AllowAllAuthenticator",
  "partitioner" => "org.apache.cassandra.dht.Murmur3Partitioner",
  "rpc_address" => "0.0.0.0",
  "commitlog_total_space_in_mb" => 2048,
  "memtable_flush_writers" => 2,
  "trickle_fsync" => true,
  "trickle_fsync_interval_in_kb" => 4096,
  "listen_address" => Facter.value("ec2_local_ipv4"),
  "rpc_server_type" => "hsha",
  "incremental_backups" => true,
  "concurrent_compactors" => 4,
  "multithreaded_compaction" => true,
  "endpoint_snitch" => "Ec2Snitch",
}

config = {}
# Load the Cassandra default config
config = YAML.load(File.read(default_config_file))
config.merge!(defaults)

if File.exists?(overriders_file)
  # Load the json overrides
  overrides_config = JSON.parse(File.read(overriders_file))

  overrides = {
    "cluster_name" => overrides_config["cluster_name"],
    "seed_provider" => [
      {
        "parameters" => [
          { "seeds" => overrides_config["seeds"] },
        ],
        "class_name" => "org.apache.cassandra.locator.SimpleSeedProvider",
      },
    ],
  }

  # if this is a seed node then set the broadcast_address to the public_ipv4 for the Ec2Snitch to pick it up
  if overrides_config["seeds"].include?(Facter.value("ec2_public_ipv4"))
    overrides["broadcast_address"] = Facter.value("ec2_public_ipv4")
  end

  # Merge the overrides with the current default config
  config.merge!(overrides)
end
-%>
<%= config.to_yaml %>