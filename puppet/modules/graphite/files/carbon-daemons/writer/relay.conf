# #######################
# # Relay Configuration #
# #######################
# This config file only applies for carbon relays, that is
# daemons whose WORKFLOW ends in 'relay'.
#
# RELAY_METHOD can be one of the following:
#   relay-rules
#     Use relay-rules.conf to route metrics to destinations based on pattern rules
#   consistent-hashing
#     Use consistent-hashing for even distribution of metrics between destinations
#   aggregated-consistent-hashing
#     Use consistent-hashing but take into account an aggregation-rules.conf
#     shared by downstream carbon-aggregator daemons. This will ensure that all
#     metrics that map to a given aggregation rule are sent to the same
#     carbon-aggregator instance.
#     Enable this for carbon-relays that send to a group of carbon-aggregators
#
#RELAY_METHOD = consistent-hashing
#RELAY_METHOD = aggregated-consistent-hashing
RELAY_METHOD = relay-rules

# If you use consistent-hashing you may want to add redundancy
# of your data by replicating every datapoint to more than
# one machine. This has no effect with relay-rules.
REPLICATION_FACTOR = 1

# This is a list of carbon daemons we will send any relayed or
# generated metrics to. The default provided would send to a single
# carbon-cache instance on the default port. However if you
# use multiple carbon-cache instances then it would look like this:
#
# DESTINATIONS = 127.0.0.1:2004:cache0, 127.0.0.1:2104:cache1
#
# The general form is IP:PORT:INSTANCE where the :INSTANCE part
# USED TO BE optional but is now required!
#
# Note that if the destinations are all caches then this should
# match the IPs listed in the webapp's CARBONLINK_HOSTS setting
# (though the ports will differ). Order matters!
DESTINATIONS = 127.0.0.1:2004:cache0

# This defines the maximum "message size" between carbon daemons.
# You shouldn't need to tune this unless you really know what you're doing.
MAX_DATAPOINTS_PER_MESSAGE = 500
MAX_QUEUE_SIZE = 10000

# Set this to True to pause receiving metrics when the size of a queue to any of the
# DESTINATIONS hits MAX_QUEUE_SIZE. If this happens, sockets over which metrics
# are received will temporarily stop accepting data until the send queues fall
# below 80% of MAX_QUEUE_SIZE. If this is set to False (the default), received
# points will be dropped when the metric cache fills.
USE_FLOW_CONTROL = False
